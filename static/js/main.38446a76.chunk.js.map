{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Grid","item","xs","Card","CardActionArea","CardHeader","title","Title","CardMedia","width","alt","src","CardContent","Year","Search","useState","searchValue","setSearchValue","TextField","id","value","onChange","e","target","type","placeholder","Button","variant","color","onClick","preventDefault","search","initialState","loading","movies","errorMessage","reducer","state","action","payload","error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Response","Error","Container","maxWidth","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38446a76.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h2>{props.text}</h2>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Card, CardActionArea, CardContent, CardMedia, CardHeader, Grid } from '@material-ui/core';\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\r\n\r\nconst Movie = ({ movie }) => {\r\n  const poster =\r\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n  return (\r\n    <Grid item xs={3}>\r\n      <Card className=\"movie\">\r\n      <CardActionArea>\r\n        <CardHeader title={movie.Title} />\r\n        <CardMedia>\r\n          <img\r\n            width=\"200\"\r\n            alt={`The movie titled: ${movie.Title}`}\r\n            src={poster}\r\n          />\r\n        </CardMedia>\r\n        <CardContent>\r\n          <p>({movie.Year})</p>\r\n        </CardContent>\r\n        </CardActionArea>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import React, { useState } from \"react\";\r\nimport { TextField, Button, Card } from '@material-ui/core';\r\n\r\nconst Search = (props) => {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  \r\n  const handleSearchInputChanges = (e) => {\r\n    setSearchValue(e.target.value);\r\n  }\r\n\r\n  const resetInputField = () => {\r\n    setSearchValue(\"\")\r\n  }\r\n\r\n  const callSearchFunction = (e) => {\r\n    e.preventDefault();\r\n    props.search(searchValue);\r\n    resetInputField();\r\n  }\r\n\r\n  return (\r\n      <form className=\"search\">\r\n        <TextField \r\n          id=\"standard-basic\" \r\n          value={searchValue}\r\n          onChange={handleSearchInputChanges}\r\n          type=\"text\"\r\n          placeholder=\"Title here...\"\r\n        />\r\n        {/*<input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />*/}\r\n        <Button variant=\"contained\" color=\"primary\" onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\">\r\n          Search\r\n        </Button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useReducer, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\nimport { Container } from '@material-ui/core';\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n    useEffect(() => {\n    \n        fetch(MOVIE_API_URL)\n            .then(response => response.json())\n            .then(jsonResponse => {\n        \n            dispatch({\n                type: \"SEARCH_MOVIES_SUCCESS\",\n                payload: jsonResponse.Search\n          });\n        });\n    }, []);\n\n    const search = searchValue => {\n      dispatch({\n        type: \"SEARCH_MOVIES_REQUEST\"\n      });\n  \n        fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n        .then(response => response.json())\n        .then(jsonResponse => {\n          if (jsonResponse.Response === \"True\") {\n            dispatch({\n                type: \"SEARCH_MOVIES_SUCCESS\",\n                payload: jsonResponse.Search\n            });\n          } else {\n            dispatch({\n                type: \"SEARCH_MOVIES_FAILURE\",\n                error: jsonResponse.Error\n            });\n          }\n        });\n    };\n\n    const { movies, errorMessage, loading } = state;\n\n    return (\n    <div className=\"App\">\n      <Header text=\"BINGE\" />\n      <Search search={search} />\n      <Container maxWidth=\"lg\" className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading... </span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}